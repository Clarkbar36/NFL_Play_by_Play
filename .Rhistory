library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
install.packages("sparkR")
checkJavaVersion <- function() {
javaBin <- "java"
javaHome <- Sys.getenv("JAVA_HOME")
javaReqs <- utils::packageDescription(utils::packageName(), fields=c("SystemRequirements"))
sparkJavaVersion <- as.numeric(tail(strsplit(javaReqs, "[(=)]")[[1]], n = 1L))
if (javaHome != "") {
javaBin <- file.path(javaHome, "bin", javaBin)
}
# If java is missing from PATH, we get an error in Unix and a warning in Windows
javaVersionOut <- tryCatch(
launchScript(javaBin, "-version", wait = TRUE, stdout = TRUE, stderr = TRUE),
error = function(e) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", e)
},
warning = function(w) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", w)
})
javaVersionFilter <- Filter(
function(x) {
grepl("java version", x)
}, javaVersionOut)
javaVersionStr <- strsplit(javaVersionFilter[[1]], "[\"]")[[1L]][2]
# javaVersionStr is of the form 1.8.0_92.
# Extract 8 from it to compare to sparkJavaVersion
javaVersionNum <- as.integer(strsplit(javaVersionStr, "[.]")[[1L]][2])
if (javaVersionNum != sparkJavaVersion) {
stop(paste("Java version", sparkJavaVersion, "is required for this package; found version:", javaVersionStr))
}
}
combinedArgs
}
checkJavaVersion <- function() {
javaBin <- "java"
javaHome <- Sys.getenv("JAVA_HOME")
javaReqs <- utils::packageDescription(utils::packageName(), fields=c("SystemRequirements"))
sparkJavaVersion <- as.numeric(tail(strsplit(javaReqs, "[(=)]")[[1]], n = 1L))
if (javaHome != "") {
javaBin <- file.path(javaHome, "bin", javaBin)
}
# If java is missing from PATH, we get an error in Unix and a warning in Windows
javaVersionOut <- tryCatch(
launchScript(javaBin, "-version", wait = TRUE, stdout = TRUE, stderr = TRUE),
error = function(e) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", e)
},
warning = function(w) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", w)
})
javaVersionFilter <- Filter(
function(x) {
grepl("java version", x)
}, javaVersionOut)
javaVersionStr <- strsplit(javaVersionFilter[[1]], "[\"]")[[1L]][2]
# javaVersionStr is of the form 1.8.0_92.
# Extract 8 from it to compare to sparkJavaVersion
javaVersionNum <- as.integer(strsplit(javaVersionStr, "[.]")[[1L]][2])
if (javaVersionNum != sparkJavaVersion) {
stop(paste("Java version", sparkJavaVersion, "is required for this package; found version:", javaVersionStr))
}
}
launchBackend <- function(args, sparkHome, jars, sparkSubmitOpts, packages) {
sparkSubmitBinName <- determineSparkSubmitBin()
if (sparkHome != "") {
sparkSubmitBin <- file.path(sparkHome, "bin", sparkSubmitBinName)
} else {
sparkSubmitBin <- sparkSubmitBinName
}
combinedArgs <- generateSparkSubmitArgs(args, sparkHome, jars, sparkSubmitOpts, packages)
cat("Launching java with spark-submit command", sparkSubmitBin, combinedArgs, "\n")
invisible(launchScript(sparkSubmitBin, combinedArgs))
}
connectBackend <- function(hostname, port, timeout, authSecret) {
if (exists(".sparkRcon", envir = .sparkREnv)) {
if (isOpen(.sparkREnv[[".sparkRCon"]])) {
cat("SparkRBackend client connection already exists\n")
return(get(".sparkRcon", envir = .sparkREnv))
}
}
con <- socketConnection(host = hostname, port = port, server = FALSE,
blocking = TRUE, open = "wb", timeout = timeout)
doServerAuth(con, authSecret)
assign(".sparkRCon", con, envir = .sparkREnv)
con
}
determineSparkSubmitBin <- function() {
if (.Platform$OS.type == "unix") {
sparkSubmitBinName <- "spark-submit"
} else {
sparkSubmitBinName <- "spark-submit2.cmd"
}
sparkSubmitBinName
}
generateSparkSubmitArgs <- function(args, sparkHome, jars, sparkSubmitOpts, packages) {
jars <- paste0(jars, collapse = ",")
if (jars != "") {
# construct the jars argument with a space between --jars and comma-separated values
jars <- paste0("--jars ", jars)
}
packages <- paste0(packages, collapse = ",")
if (packages != "") {
# construct the packages argument with a space between --packages and comma-separated values
packages <- paste0("--packages ", packages)
}
combinedArgs <- paste(jars, packages, sparkSubmitOpts, args, sep = " ")
combinedArgs
}
checkJavaVersion <- function() {
javaBin <- "java"
javaHome <- Sys.getenv("JAVA_HOME")
javaReqs <- utils::packageDescription(utils::packageName(), fields=c("SystemRequirements"))
sparkJavaVersion <- as.numeric(tail(strsplit(javaReqs, "[(=)]")[[1]], n = 1L))
if (javaHome != "") {
javaBin <- file.path(javaHome, "bin", javaBin)
}
# If java is missing from PATH, we get an error in Unix and a warning in Windows
javaVersionOut <- tryCatch(
launchScript(javaBin, "-version", wait = TRUE, stdout = TRUE, stderr = TRUE),
error = function(e) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", e)
},
warning = function(w) {
stop("Java version check failed. Please make sure Java is installed",
" and set JAVA_HOME to point to the installation directory.", w)
})
javaVersionFilter <- Filter(
function(x) {
grepl("java version", x)
}, javaVersionOut)
javaVersionStr <- strsplit(javaVersionFilter[[1]], "[\"]")[[1L]][2]
# javaVersionStr is of the form 1.8.0_92.
# Extract 8 from it to compare to sparkJavaVersion
javaVersionNum <- as.integer(strsplit(javaVersionStr, "[.]")[[1L]][2])
if (javaVersionNum != sparkJavaVersion) {
stop(paste("Java version", sparkJavaVersion, "is required for this package; found version:", javaVersionStr))
}
}
launchBackend <- function(args, sparkHome, jars, sparkSubmitOpts, packages) {
sparkSubmitBinName <- determineSparkSubmitBin()
if (sparkHome != "") {
sparkSubmitBin <- file.path(sparkHome, "bin", sparkSubmitBinName)
} else {
sparkSubmitBin <- sparkSubmitBinName
}
combinedArgs <- generateSparkSubmitArgs(args, sparkHome, jars, sparkSubmitOpts, packages)
cat("Launching java with spark-submit command", sparkSubmitBin, combinedArgs, "\n")
invisible(launchScript(sparkSubmitBin, combinedArgs))
}
View(checkJavaVersion)
install.packages("rJava", dependencies = TRUE)
install.packages(c("rmarkdown", "ggplot2", "magrittr", "whisker", "data.table"))
install.packages(c("rmarkdown", "ggplot2", "magrittr", "whisker", "data.table"))
sc <- sparkR.init()
library(SparkR)
source('~/Box/Alissa Private Folder/Alex/DSCI 644/HW1/HW1.R')
library(devtools)
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
library(ffanalytics)
View(player_table)
my_scrape <- scrape_data(src = c("Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2018, week = 0)
head(my_scrape)
head(my_scrape$QB)
my_scrape <- scrape_data(src = c("Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2019, week = 0)
my_scrape <- scrape_data(src = c("Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2018, week = 0)
my_scrape <- scrape_data(src = c("CBS", "ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2018, week = 0)
my_projections <-  projections_table(my_scrape)
library(nflscrapR)
setwd("~/Box/Alissa Private Folder/Alex/NFL_PBP")
# season_pbp_2018 <- scrape_season_play_by_play(2018, "reg")
# write.csv(season_pbp_2018,"~/Box/Alissa Private Folder/Alex/2018_nfl_season.csv")
start_time <- Sys.time()
Sys.time()
pbp_2011 <- scrape_season_play_by_play(2011, "reg")
end_time <- Sys.time()
end_time - start_time
pbp_2011$season <- 2011
write.csv(pbp_2011,"2011_nfl_season.csv",row.names = FALSE)
# season_pbp_2018 <- scrape_season_play_by_play(2018, "reg")
# write.csv(season_pbp_2018,"~/Box/Alissa Private Folder/Alex/2018_nfl_season.csv")
start_time <- Sys.time()
end_time <- Sys.time()
round(end_time - start_time,2)
# season_pbp_2018 <- scrape_season_play_by_play(2018, "reg")
# write.csv(season_pbp_2018,"~/Box/Alissa Private Folder/Alex/2018_nfl_season.csv")
start_time <- Sys.time()
end_time <- Sys.time()
round(end_time - start_time,0)
start_time <- Sys.time()
Sys.time()
pbp_2010 <- scrape_season_play_by_play(2010, "reg")
end_time <- Sys.time()
round(end_time - start_time,2)
pbp_2010$season <- 2010
write.csv(pbp_2010,"2010_nfl_season.csv",row.names = FALSE)
start_time <- Sys.time()
Sys.time()
pbp_2009 <- scrape_season_play_by_play(2009, "reg")
end_time <- Sys.time()
round(end_time - start_time,2)
pbp_2009$season <- 2009
write.csv(pbp_2009,"2009_nfl_season.csv",row.names = FALSE)
setwd("~/Documents/GitHub/NFL_Play_by_Play")
filenames = paste(paste(2009:2018, '_nfl_season', sep = ''), '.csv', sep = '')
NFL_PBP_10_Year <- do.call(rbind, lapply(filenames, read.csv, header = TRUE))
NFL_PBP_10_Year <- do.call(rbind, lapply(filenames, read.csv, header = TRUE))
setwd("~/Documents/GitHub/NFL_Play_by_Play")
NFL_PBP_10_Year <- do.call(rbind, lapply(filenames, read.csv, header = TRUE))
filenames = paste(paste('"',2009:2018, '_nfl_season', sep = ''), '.csv', sep = '')
filenames = paste(paste(2009:2018, '_nfl_season', sep = ''), '.csv', sep = '')
NFL_PBP_10_Year <- do.call(rbind, lapply(filenames, read.csv, header = TRUE))
read.csv("2009_nfl_season.csv")
